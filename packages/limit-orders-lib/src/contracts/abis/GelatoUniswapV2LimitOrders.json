{
  "address": "0xe891659e9f400b7b58A69FD175B64921806Ce652",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gelato",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedNative",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReturn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "initCodeHash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct UniswapV2Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "LogDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "auxData",
          "type": "bytes"
        }
      ],
      "name": "LogFill",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GELATO",
      "outputs": [
        {
          "internalType": "contract IGelato",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WRAPPED_NATIVE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minReturn",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReturn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "initCodeHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct UniswapV2Order",
          "name": "_order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_auxData",
          "type": "bytes"
        }
      ],
      "name": "canFill",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReturn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "initCodeHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct UniswapV2Order",
          "name": "_order",
          "type": "tuple"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReturn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "initCodeHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct UniswapV2Order",
          "name": "_order",
          "type": "tuple"
        }
      ],
      "name": "depositNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReturn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "initCodeHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct UniswapV2Order",
          "name": "_order",
          "type": "tuple"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReturn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "initCodeHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct UniswapV2Order",
          "name": "_order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_auxData",
          "type": "bytes"
        }
      ],
      "name": "fill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "isActiveOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReturn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "initCodeHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct UniswapV2Order",
          "name": "_order",
          "type": "tuple"
        }
      ],
      "name": "keyOf",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb4bcfceb36d211d94c8785f526e1ff739debe0bde7f6418f487cf26f2d075090",
  "receipt": {
    "to": null,
    "from": "0x15Ba7233c3266e62d4E7EF36a4F1b403ae376214",
    "contractAddress": "0xe891659e9f400b7b58A69FD175B64921806Ce652",
    "transactionIndex": 0,
    "gasUsed": "2380248",
    "logsBloom": "0x
    "blockHash": "0xb30f4a8f728fd5bfaacb76e0f4f0668aa96d2711a901b12dab08fafca246c983",
    "transactionHash": "0xb4bcfceb36d211d94c8785f526e1ff739debe0bde7f6418f487cf26f2d075090",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 28983199,
        "transactionHash": "0xb4bcfceb36d211d94c8785f526e1ff739debe0bde7f6418f487cf26f2d075090",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000015ba7233c3266e62d4e7ef36a4f1b403ae376214",
          "0x000000000000000000000000b9ede6f94d192073d8eaf85f8db677133d483249"
        ],
        "data": "0x000000000000000000000000000000000000000000000000069b4496c434259800000000000000000000000000000000000000000000000065f0605fd4afbaea0000000000000000000000000000000000000000000043646b80c7a0f6e934c90000000000000000000000000000000000000000000000005f551bc9107b9552000000000000000000000000000000000000000000004364721c0c37bb1d5a61",
        "logIndex": 0,
        "blockHash": "0xb30f4a8f728fd5bfaacb76e0f4f0668aa96d2711a901b12dab08fafca246c983"
      }
    ],
    "blockNumber": 28983199,
    "cumulativeGasUsed": "2380248",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7598e84B2E114AB62CAB288CE5f7d5f6bad35BbA",
    "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270"
  ],
  "numDeployments": 2,
  "solcInputHash": "a9df064ff3dc2a062cfb977fc08da8cf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelato\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNative\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct UniswapV2Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"auxData\",\"type\":\"bytes\"}],\"name\":\"LogFill\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GELATO\",\"outputs\":[{\"internalType\":\"contract IGelato\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPED_NATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct UniswapV2Order\",\"name\":\"_order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_auxData\",\"type\":\"bytes\"}],\"name\":\"canFill\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct UniswapV2Order\",\"name\":\"_order\",\"type\":\"tuple\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct UniswapV2Order\",\"name\":\"_order\",\"type\":\"tuple\"}],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct UniswapV2Order\",\"name\":\"_order\",\"type\":\"tuple\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct UniswapV2Order\",\"name\":\"_order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_auxData\",\"type\":\"bytes\"}],\"name\":\"fill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"isActiveOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct UniswapV2Order\",\"name\":\"_order\",\"type\":\"tuple\"}],\"name\":\"keyOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GelatoUniswapV2LimitOrders.sol\":\"GelatoUniswapV2LimitOrders\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/GelatoUniswapV2LimitOrders.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {UniswapV2Order} from \\\"./structs/UniswapV2Order.sol\\\";\\nimport {_balanceOf} from \\\"./functions/FTokenUtils.sol\\\";\\nimport {\\n    _canHandleUniswapV2LimitOrder\\n} from \\\"./functions/uniswap/FLimitOrders.sol\\\";\\nimport {GelatoUniswapV2OrdersVault} from \\\"./GelatoUniswapV2OrdersVault.sol\\\";\\nimport {\\n    ReentrancyGuard\\n} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract GelatoUniswapV2LimitOrders is\\n    GelatoUniswapV2OrdersVault,\\n    ReentrancyGuard\\n{\\n    modifier onlyGelato() {\\n        require(address(GELATO) == msg.sender, \\\"GelatoOrdersVault: onlyGelato\\\");\\n        _;\\n    }\\n\\n    constructor(address _gelato, address _wrappedNative)\\n        GelatoUniswapV2OrdersVault(_gelato, _wrappedNative)\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    function fill(UniswapV2Order calldata _order, bytes calldata _auxData)\\n        external\\n        override\\n        onlyGelato\\n        nonReentrant\\n    {\\n        uint256 ownerBalanceBefore = _balanceOf(\\n            _order.outputToken,\\n            _order.owner\\n        );\\n\\n        // pull order funds and handle swap logic\\n        // implements Checks Effects Interactions pattern and thus is reentrancy protected\\n        _fill(_order, _auxData);\\n\\n        // check limit order conditions\\n        uint256 ownerBalanceAfter = _balanceOf(\\n            _order.outputToken,\\n            _order.owner\\n        );\\n\\n        require(\\n            ownerBalanceAfter - ownerBalanceBefore >= _order.minReturn,\\n            \\\"GelatoOrdersVault.fill: ISSUFICIENT_OWNER_OUTPUT_TOKEN_BALANCE\\\"\\n        );\\n\\n        emit LogFill(\\n            keyOf(_order),\\n            _order.owner,\\n            ownerBalanceAfter - ownerBalanceBefore,\\n            _auxData\\n        );\\n    }\\n\\n    function canFill(\\n        uint256 _minReturn,\\n        UniswapV2Order calldata _order,\\n        bytes calldata _auxData\\n    ) external view override returns (bool) {\\n        return\\n            isActiveOrder(keyOf(_order)) &&\\n            _canHandleUniswapV2LimitOrder(\\n                _order,\\n                deposits[keyOf(_order)],\\n                _minReturn,\\n                WRAPPED_NATIVE,\\n                _auxData\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x0f41ef1eae6a0d1f3d1fea3dbc5bca6bcc55264c37b4309f5c7a2600e51f44a2\",\"license\":\"GPL-3.0\"},\"contracts/GelatoUniswapV2OrdersVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {NATIVE} from \\\"./constants/Tokens.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IWETH} from \\\"./interfaces/IWETH.sol\\\";\\nimport {IGelato} from \\\"./interfaces/IGelato.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {UniswapV2Order} from \\\"./structs/UniswapV2Order.sol\\\";\\nimport {UniswapV2Library} from \\\"./lib/UniswapV2Library.sol\\\";\\nimport {_balanceOf} from \\\"./functions/FTokenUtils.sol\\\";\\nimport {\\n    IUniswapV2Pair\\n} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport {IGelatoUniswapV2Orders} from \\\"./interfaces/IGelatoUniswapV2Orders.sol\\\";\\nimport {IUniswapV2Router02} from \\\"./interfaces/IUniswapV2Router02.sol\\\";\\n\\n// solhint-disable max-line-length\\nabstract contract GelatoUniswapV2OrdersVault is IGelatoUniswapV2Orders {\\n    using Address for address payable;\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable WRAPPED_NATIVE;\\n    // solhint-disable-next-line var-name-mixedcase\\n    IGelato public immutable GELATO;\\n\\n    // hashed orders\\n    mapping(bytes32 => uint256) public deposits;\\n\\n    event LogDeposit(\\n        bytes32 indexed key,\\n        UniswapV2Order order,\\n        uint256 amountIn\\n    );\\n\\n    event LogFill(\\n        bytes32 indexed key,\\n        address indexed owner,\\n        uint256 amountOut,\\n        bytes auxData\\n    );\\n\\n    event LogCancelled(\\n        bytes32 indexed key,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    constructor(address _gelato, address _wrappedNative) {\\n        WRAPPED_NATIVE = _wrappedNative;\\n        GELATO = IGelato(_gelato);\\n    }\\n\\n    function depositNative(UniswapV2Order calldata _order)\\n        external\\n        payable\\n        virtual\\n        override\\n    {\\n        require(msg.value != 0, \\\"GelatoOrdersVault.depositNative: VALUE_IS_0\\\");\\n        require(\\n            _order.inputToken == NATIVE,\\n            \\\"GelatoOrdersVault.depositNative: WRONG_INPUT_TOKEN\\\"\\n        );\\n        require(\\n            !_isNativeOrWrappedNative(_order.outputToken),\\n            \\\"GelatoOrdersVault.depositNative: NATIVE_TO_NATIVE\\\"\\n        );\\n        bytes32 key = keyOf(_order);\\n        require(\\n            !isActiveOrder(key),\\n            \\\"GelatoOrdersVault.depositNative: ORDER_ALREADY_EXSITS\\\"\\n        );\\n\\n        deposits[key] = msg.value;\\n        emit LogDeposit(key, _order, msg.value);\\n    }\\n\\n    function depositToken(UniswapV2Order calldata _order)\\n        external\\n        virtual\\n        override\\n    {\\n        require(\\n            _order.inputToken != NATIVE,\\n            \\\"GelatoOrdersVault.depositToken: ONLY_ERC20\\\"\\n        );\\n\\n        if (_order.inputToken == WRAPPED_NATIVE) {\\n            require(\\n                !_isNativeOrWrappedNative(_order.outputToken),\\n                \\\"GelatoOrdersVault.depositToken: NATIVE_TO_NATIVE\\\"\\n            );\\n        }\\n\\n        uint256 vaultBalanceBefore = IERC20(_order.inputToken).balanceOf(\\n            address(this)\\n        );\\n\\n        IERC20(_order.inputToken).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _order.amountIn\\n        );\\n\\n        // don't trust transferFrom\\n        uint256 vaultBalanceAfter = IERC20(_order.inputToken).balanceOf(\\n            address(this)\\n        );\\n        uint256 amountDeposited = vaultBalanceAfter - vaultBalanceBefore;\\n        require(\\n            amountDeposited != 0,\\n            \\\"GelatoOrdersVault.depositToken: NO_TOKENS_SENT\\\"\\n        );\\n\\n        bytes32 key = keyOf(_order);\\n        require(\\n            !isActiveOrder(key),\\n            \\\"GelatoOrdersVault.depositToken: ORDER_ALREADY_EXSITS\\\"\\n        );\\n\\n        deposits[key] = amountDeposited;\\n\\n        emit LogDeposit(key, _order, amountDeposited);\\n    }\\n\\n    function cancelOrder(UniswapV2Order calldata _order)\\n        external\\n        virtual\\n        override\\n    {\\n        require(\\n            msg.sender == _order.owner,\\n            \\\"GelatoOrdersVault.cancelOrder: INVALID_OWNER\\\"\\n        );\\n        bytes32 key = keyOf(_order);\\n        require(\\n            isActiveOrder(key),\\n            \\\"GelatoOrdersVault.cancelOrder: INVALID_ORDER\\\"\\n        );\\n        uint256 amount = _pullOrder(\\n            _order.inputToken,\\n            key,\\n            payable(msg.sender)\\n        );\\n\\n        emit LogCancelled(key, _order.owner, amount);\\n    }\\n\\n    function isActiveOrder(bytes32 _key) public view returns (bool) {\\n        return deposits[_key] != 0;\\n    }\\n\\n    function keyOf(UniswapV2Order calldata _order)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(_order));\\n    }\\n\\n    function _fill(UniswapV2Order calldata _order, bytes calldata _auxData)\\n        internal\\n    {\\n        bytes32 key = keyOf(_order);\\n        // implements Checks Effects Interactions pattern and thus is reentrancy protected\\n        require(isActiveOrder(key), \\\"GelatoOrdersVault.fill: INVALID_ORDER\\\");\\n        (\\n            uint256 fee,\\n            address pool,\\n            address feePool,\\n            address[] memory path,\\n            address[] memory feePath\\n        ) = abi.decode(\\n                _auxData,\\n                (uint256, address, address, address[], address[])\\n            );\\n        uint256 amount = deposits[key];\\n\\n        delete deposits[key];\\n        if (\\n            _order.inputToken == WRAPPED_NATIVE || _order.inputToken == NATIVE\\n        ) {\\n            _swapExactNativeForToken(_order, amount, fee, pool, path);\\n        } else if (\\n            _order.outputToken == WRAPPED_NATIVE || _order.outputToken == NATIVE\\n        ) {\\n            _swapExactTokenForNative(_order, amount, fee, pool, path);\\n        } else {\\n            _swapExactTokenForToken(\\n                _order,\\n                amount,\\n                fee,\\n                pool,\\n                feePool,\\n                path,\\n                feePath\\n            );\\n        }\\n    }\\n\\n    function _swapExactNativeForToken(\\n        UniswapV2Order calldata _order,\\n        uint256 _amount,\\n        uint256 _fee,\\n        address _pool,\\n        address[] memory _path\\n    ) internal {\\n        require(\\n            _amount > _fee,\\n            \\\"GelatoOrdersVault.fill: CANT_PAY_RELAYER_FEE_TO_HIGH\\\"\\n        );\\n        if (_order.inputToken == NATIVE) {\\n            IWETH(WRAPPED_NATIVE).deposit{value: _amount - _fee}();\\n            payable(GELATO.getFeeCollector()).sendValue(_fee);\\n        } else {\\n            SafeERC20.safeTransfer(\\n                IERC20(WRAPPED_NATIVE),\\n                GELATO.getFeeCollector(),\\n                _fee\\n            );\\n        }\\n\\n        SafeERC20.safeTransfer(IERC20(WRAPPED_NATIVE), _pool, _amount - _fee);\\n        // calculate amountsOut for every hop in path based on amountIn\\n        // swap destination can be _order.owner\\n        _swapSupportingFeeOnTransferTokens(_path, _order.owner, _order);\\n    }\\n\\n    function _swapExactTokenForNative(\\n        UniswapV2Order calldata _order,\\n        uint256 _amount,\\n        uint256 _fee,\\n        address _pool,\\n        address[] memory _path\\n    ) internal {\\n        uint256 balanceBefore = _balanceOf(WRAPPED_NATIVE, address(this));\\n        SafeERC20.safeTransfer(IERC20(_order.inputToken), _pool, _amount);\\n        // swap with destination `address(this)` to then extract fee for `relayer`\\n        _swapSupportingFeeOnTransferTokens(_path, address(this), _order);\\n\\n        uint256 amountSwapped = _balanceOf(WRAPPED_NATIVE, address(this)) -\\n            balanceBefore;\\n\\n        if (_order.outputToken == NATIVE) {\\n            IWETH(WRAPPED_NATIVE).withdraw(amountSwapped - _fee);\\n            payable(_order.owner).sendValue(amountSwapped - _fee);\\n        } else {\\n            SafeERC20.safeTransfer(\\n                IERC20(_order.outputToken),\\n                _order.owner,\\n                amountSwapped - _fee\\n            );\\n        }\\n        SafeERC20.safeTransfer(\\n            IERC20(WRAPPED_NATIVE),\\n            GELATO.getFeeCollector(),\\n            _fee\\n        );\\n    }\\n\\n    function _swapExactTokenForToken(\\n        UniswapV2Order calldata _order,\\n        uint256 _amount,\\n        uint256 _feeInNative,\\n        address _pool,\\n        address _feePool,\\n        address[] memory _path,\\n        address[] memory _feePath\\n    ) internal {\\n        // calculate how much inputToken needed to get fee in NATIVE (first index in amounts array)\\n        uint256 feeInInputToken = IUniswapV2Router02(_order.router)\\n            .getAmountsIn(_feeInNative, _feePath)[0];\\n\\n        SafeERC20.safeTransfer(\\n            IERC20(_order.inputToken),\\n            _pool,\\n            _amount - feeInInputToken\\n        );\\n        // calculate exact input amount that arrived in `pool`\\n        // can swap with destination _order.owner because fee was subtracted from amounts\\n        _swapSupportingFeeOnTransferTokens(_path, _order.owner, _order);\\n        // needs additional swap to convert `inputToken` to `NATIVE` to be able to pay `relayer`\\n        // swap token for fee in native\\n        SafeERC20.safeTransfer(\\n            IERC20(_order.inputToken),\\n            _feePool,\\n            feeInInputToken\\n        );\\n        // can swap with destination relayer because relayer accepts WETH\\n        _swapSupportingFeeOnTransferTokens(\\n            _feePath,\\n            GELATO.getFeeCollector(),\\n            _order\\n        );\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    // Original work by Uniswap\\n    // - https://github.com/Uniswap/v2-periphery/blob/2efa12e0f2d808d9b49737927f0e416fafa5af68/contracts/UniswapV2Router02.sol#L321-L338\\n    // modified function interface to be able to parse generic factory and initCodeHash\\n    function _swapSupportingFeeOnTransferTokens(\\n        address[] memory path,\\n        address _to,\\n        UniswapV2Order calldata _order\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            IUniswapV2Pair pair = IUniswapV2Pair(\\n                UniswapV2Library.pairFor(\\n                    _order.factory,\\n                    input,\\n                    output,\\n                    _order.initCodeHash\\n                )\\n            );\\n            // modified: remove variable to avoid STD\\n            uint256 amountOutput;\\n            {\\n                // scope to avoid stack too deep errors\\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0\\n                    ? (reserve0, reserve1)\\n                    : (reserve1, reserve0);\\n                amountOutput = IUniswapV2Router02(_order.router).getAmountOut(\\n                    IERC20(input).balanceOf(address(pair)) - reserveInput, // modified: remove variable to avoid STD\\n                    reserveInput,\\n                    reserveOutput\\n                );\\n            }\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOutput)\\n                : (amountOutput, uint256(0));\\n            address to = i < path.length - 2\\n                ? UniswapV2Library.pairFor(\\n                    _order.factory,\\n                    output,\\n                    path[i + 2],\\n                    _order.initCodeHash\\n                )\\n                : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    function _pullOrder(\\n        address _inputToken,\\n        bytes32 _key,\\n        address _to\\n    ) private returns (uint256 amount) {\\n        amount = deposits[_key];\\n        delete deposits[_key];\\n        if (_inputToken == NATIVE) {\\n            (bool success, ) = payable(_to).call{value: amount}(\\\"\\\");\\n            require(\\n                success,\\n                \\\"GelatoOrdersVault._pullOrder: SEND_NATIVE_FAILED\\\"\\n            );\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(_inputToken), _to, amount);\\n        }\\n    }\\n\\n    function _isNativeOrWrappedNative(address _token)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return _token == NATIVE || _token == WRAPPED_NATIVE;\\n    }\\n}\\n\",\"keccak256\":\"0x9e04af117f1f213fa9433d9b38e62030ed0af609f1bc5a2c26475b01a2977d93\",\"license\":\"GPL-3.0\"},\"contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\naddress constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0x15ab32daa8d08bd287a800ca672ef936db65eef11c3f40a160343d3cd81b32a3\",\"license\":\"GPL-3.0\"},\"contracts/functions/FTokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {NATIVE} from \\\"../constants/Tokens.sol\\\";\\n\\nfunction _balanceOf(address _token, address _account) view returns (uint256) {\\n    return\\n        NATIVE == _token\\n            ? _account.balance\\n            : IERC20(_token).balanceOf(_account);\\n}\\n\",\"keccak256\":\"0x911e166c48ddb97d7841676b1158d552e841921fe9433d55897a177d624a0b67\",\"license\":\"GPL-3.0\"},\"contracts/functions/uniswap/FLimitOrders.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {_getAmountOut, _getAmountIn} from \\\"./FUniswapGeneral.sol\\\";\\nimport {NATIVE} from \\\"../../constants/Tokens.sol\\\";\\nimport {UniswapV2Order} from \\\"../../structs/UniswapV2Order.sol\\\";\\n\\nfunction _canHandleUniswapV2LimitOrder(\\n    UniswapV2Order calldata _order,\\n    uint256 _amountIn,\\n    uint256 _minReturn,\\n    address _wrappedNative,\\n    bytes calldata _auxData\\n) view returns (bool) {\\n    (uint256 fee, , , address[] memory path, address[] memory feePath) = abi\\n        .decode(_auxData, (uint256, address, address, address[], address[]));\\n\\n    return\\n        _canHandleBody(\\n            _order.inputToken,\\n            _order.outputToken,\\n            _amountIn,\\n            _minReturn,\\n            _order.router,\\n            _wrappedNative,\\n            fee,\\n            path,\\n            feePath\\n        );\\n}\\n\\nfunction _canHandleBody(\\n    address _inToken,\\n    address _outToken,\\n    uint256 _amountIn,\\n    uint256 _minReturn,\\n    address _uniRouter,\\n    address _wrappedNative,\\n    uint256 _fee,\\n    address[] memory _path,\\n    address[] memory _feePath\\n) view returns (bool) {\\n    if (_inToken == _wrappedNative || _inToken == NATIVE) {\\n        if (_amountIn <= _fee) return false;\\n        return _getAmountOut(_amountIn - _fee, _path, _uniRouter) >= _minReturn;\\n    } else if (_outToken == _wrappedNative || _outToken == NATIVE) {\\n        uint256 bought = _getAmountOut(_amountIn, _path, _uniRouter);\\n        if (bought <= _fee) return false;\\n        return bought - _fee >= _minReturn;\\n    } else {\\n        uint256 inTokenFee = _getAmountIn(_fee, _feePath, _uniRouter);\\n        if (inTokenFee >= _amountIn) return false;\\n        return\\n            _getAmountOut(_amountIn - inTokenFee, _path, _uniRouter) >=\\n            _minReturn;\\n    }\\n}\\n\",\"keccak256\":\"0x1950e0614e6774a3ffd4d9792061ba5cbdcca214ed216f0218d65b0d36374f09\",\"license\":\"GPL-3.0\"},\"contracts/functions/uniswap/FUniswapGeneral.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {IUniswapV2Router02} from \\\"../../interfaces/IUniswapV2Router02.sol\\\";\\n\\nfunction _getAmountOut(\\n    uint256 _amountIn,\\n    address[] memory _path,\\n    address _uniRouter\\n) view returns (uint256 amountOut) {\\n    uint256[] memory amountsOut = IUniswapV2Router02(_uniRouter).getAmountsOut(\\n        _amountIn,\\n        _path\\n    );\\n    amountOut = amountsOut[amountsOut.length - 1];\\n}\\n\\nfunction _getAmountIn(\\n    uint256 _amountOut,\\n    address[] memory _path,\\n    address _uniRouter\\n) view returns (uint256 amountIn) {\\n    uint256[] memory amountsIn = IUniswapV2Router02(_uniRouter).getAmountsIn(\\n        _amountOut,\\n        _path\\n    );\\n    amountIn = amountsIn[0];\\n}\\n\",\"keccak256\":\"0x886e84833866ea7e8c96a041ea492aa9593e82458c2b6a8173f975a495eb9d1c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGelato.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\ninterface IGelato {\\n    function getFeeCollector() external returns (address);\\n}\\n\",\"keccak256\":\"0x51c0a74b0a12823fb2b18c582533ddcc9a078eaf0aa06237d8dd085f6e5c7c72\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGelatoUniswapV2Orders.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {UniswapV2Order} from \\\"../structs/UniswapV2Order.sol\\\";\\n\\ninterface IGelatoUniswapV2Orders {\\n    function depositNative(UniswapV2Order calldata _order) external payable;\\n\\n    function depositToken(UniswapV2Order calldata _order) external;\\n\\n    function cancelOrder(UniswapV2Order calldata _order) external;\\n\\n    function fill(UniswapV2Order calldata _order, bytes calldata _auxData)\\n        external;\\n\\n    function canFill(\\n        uint256 _minReturn,\\n        UniswapV2Order calldata _order,\\n        bytes calldata _auxData\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2efb92cecc30f84a7423ee99462e4781a994bd362d01091835084b356eb07eb1\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactETHForTokens(\\n        uint256 minAmountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function factory() external pure returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WETH() external pure returns (address);\\n}\\n\",\"keccak256\":\"0x84a783e52443024d5ea6541f3ad7f807c09004de403a6c8216f81fba0a235b9a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0xf0417b65166c9464be7b132701113c63f0fbd81064edc0ee84b235e10b4058f3\",\"license\":\"GPL-3.0\"},\"contracts/lib/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n//\\n// Original work by Uniswap\\n//  - https://github.com/Uniswap/v2-periphery/blob/master/contracts/libraries/UniswapV2Library.sol\\n//\\n// Author:\\n//  - NoahZinsmeister <@NoahZinsmeister>\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    // modified function interface to be able to parse generic factory and initCodeHash\\n    // modified encoding\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 initCodeHash\\n    ) internal view returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            initCodeHash // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd42884f4b1b2c79599a58e9d541898d941aa53743efffdf00afc293f12dc292b\",\"license\":\"GPL-3.0\"},\"contracts/structs/UniswapV2Order.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nstruct UniswapV2Order {\\n    address owner;\\n    address inputToken;\\n    address outputToken;\\n    address factory;\\n    address router;\\n    uint256 amountIn;\\n    uint256 minReturn;\\n    uint256 salt;\\n    bytes32 initCodeHash;\\n}\\n\",\"keccak256\":\"0x3fdff935388cd3b875377a1c7db9a24c5c82fe8d0705e5c50d7a4cfc8ce14816\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002afb38038062002afb83398101604081905262000034916200006d565b6001600160a01b039081166080521660a05260018055620000a5565b80516001600160a01b03811681146200006857600080fd5b919050565b600080604083850312156200008157600080fd5b6200008c8362000050565b91506200009c6020840162000050565b90509250929050565b60805160a0516129b96200014260003960008181610228015281816109df01528181611237015281816112f301528181611586015261170f0152600081816101dc015281816102d501528181610c2c01528181610c8501528181610f2601528181610fb6015281816111be015281816112d201528181611380015281816113d40152818161142801528181611496015261156501526129b96000f3fe6080604052600436106100915760003560e01c8063bc01325911610059578063bc0132591461016a578063d49cbd501461018a578063d620497c146101aa578063d999984d146101ca578063eff557a71461021657600080fd5b80633a8f1235146100965780633d4dff7b146100b857806354a09aa5146100f85780637e0c34581461010b5780638acc6b3c1461014a575b600080fd5b3480156100a257600080fd5b506100b66100b1366004612287565b61024a565b005b3480156100c457600080fd5b506100e56100d33660046122a4565b60006020819052908152604090205481565b6040519081526020015b60405180910390f35b6100b6610106366004612287565b610634565b34801561011757600080fd5b5061013a6101263660046122a4565b600090815260208190526040902054151590565b60405190151581526020016100ef565b34801561015657600080fd5b506100e5610165366004612287565b61083a565b34801561017657600080fd5b506100b6610185366004612287565b61086a565b34801561019657600080fd5b506100b66101a53660046122ff565b6109dd565b3480156101b657600080fd5b5061013a6101c5366004612355565b610bf5565b3480156101d657600080fd5b506101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100ef565b34801561022257600080fd5b506101fe7f000000000000000000000000000000000000000000000000000000000000000081565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61026f60408301602084016123da565b6001600160a01b0316036102cb5760405162461bcd60e51b815260206004820152602a602482015260008051602061296483398151915260448201526904f4e4c595f45524332360b41b60648201526084015b60405180910390fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661030560408301602084016123da565b6001600160a01b03160361037f5761032b61032660608301604084016123da565b610c5b565b1561037f5760405162461bcd60e51b8152602060048201526030602482015260008051602061296483398151915260448201526f4e41544956455f544f5f4e415449564560801b60648201526084016102c2565b600061039160408301602084016123da565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156103d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb91906123f7565b905061040d60408301602084016123da565b6040516323b872dd60e01b815233600482015230602482015260a084013560448201526001600160a01b0391909116906323b872dd906064016020604051808303816000875af1158015610465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104899190612410565b50600061049c60408401602085016123da565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156104e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050691906123f7565b905060006105148383612448565b90508060000361056b5760405162461bcd60e51b815260206004820152602e602482015260008051602061296483398151915260448201526d1393d7d513d2d15394d7d4d1539560921b60648201526084016102c2565b60006105768561083a565b600081815260208190526040902054909150156105e05760405162461bcd60e51b815260206004820152603460248201526000805160206129648339815191526044820152734f524445525f414c52454144595f45585349545360601b60648201526084016102c2565b600081815260208190526040908190208390555181907f20c269191222298467aab5c214f40504fe0206bf5d94486946a749f04cdc048c906106259088908690612509565b60405180910390a25050505050565b346000036106865760405162461bcd60e51b815260206004820152602b602482015260008051602061294483398151915260448201526a02056414c55455f49535f360ac1b60648201526084016102c2565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6106ab60408301602084016123da565b6001600160a01b03161461070a5760405162461bcd60e51b81526020600482015260326024820152600080516020612944833981519152604482015271102ba927a723afa4a7282aaa2faa27a5a2a760711b60648201526084016102c2565b61071d61032660608301604084016123da565b156107725760405162461bcd60e51b81526020600482015260316024820152600080516020612944833981519152604482015270204e41544956455f544f5f4e415449564560781b60648201526084016102c2565b600061077d8261083a565b600081815260208190526040902054909150156107e85760405162461bcd60e51b81526020600482015260356024820152600080516020612944833981519152604482015274204f524445525f414c52454144595f45585349545360581b60648201526084016102c2565b600081815260208190526040908190203490819055905182917f20c269191222298467aab5c214f40504fe0206bf5d94486946a749f04cdc048c9161082e918691612509565b60405180910390a25050565b60008160405160200161084d9190612526565b604051602081830303815290604052805190602001209050919050565b61087760208201826123da565b6001600160a01b0316336001600160a01b0316146108ec5760405162461bcd60e51b815260206004820152602c60248201527f47656c61746f4f72646572735661756c742e63616e63656c4f726465723a204960448201526b272b20a624a22fa7aba722a960a11b60648201526084016102c2565b60006108f78261083a565b60008181526020819052604090205490915061096a5760405162461bcd60e51b815260206004820152602c60248201527f47656c61746f4f72646572735661756c742e63616e63656c4f726465723a204960448201526b272b20a624a22fa7a92222a960a11b60648201526084016102c2565b600061098661097f60408501602086016123da565b8333610cbf565b905061099560208401846123da565b6001600160a01b0316827f748f3ed3813a0b11e46a6229680e83073e44e99f7a093329b13abab8409d1b98836040516109d091815260200190565b60405180910390a3505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610a555760405162461bcd60e51b815260206004820152601d60248201527f47656c61746f4f72646572735661756c743a206f6e6c7947656c61746f00000060448201526064016102c2565b600260015403610aa75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102c2565b60026001556000610ad3610ac160608601604087016123da565b610ace60208701876123da565b610dcb565b9050610ae0848484610e70565b6000610b02610af560608701604088016123da565b610ace60208801886123da565b905060c0850135610b138383612448565b1015610b875760405162461bcd60e51b815260206004820152603e60248201527f47656c61746f4f72646572735661756c742e66696c6c3a20495353554649434960448201527f454e545f4f574e45525f4f55545055545f544f4b454e5f42414c414e4345000060648201526084016102c2565b610b9460208601866123da565b6001600160a01b0316610ba68661083a565b7f72d676daec0260566cd7ec0d194d62784969b10a6a4c2e27ce6a144eb654ba82610bd18585612448565b8787604051610be293929190612535565b60405180910390a3505060018055505050565b6000610c036101268561083a565b8015610c525750610c5284600080610c1a8861083a565b815260200190815260200160002054877f00000000000000000000000000000000000000000000000000000000000000008787611053565b95945050505050565b60006001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480610cb957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b6000828152602081905260408120805491905573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03851601610db9576000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610d44576040519150601f19603f3d011682016040523d82523d6000602084013e610d49565b606091505b5050905080610db35760405162461bcd60e51b815260206004820152603060248201527f47656c61746f4f72646572735661756c742e5f70756c6c4f726465723a20534560448201526f139117d3905512559157d1905253115160821b60648201526084016102c2565b50610dc4565b610dc48483836110be565b9392505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03841614610e60576040516370a0823160e01b81526001600160a01b0383811660048301528416906370a0823190602401602060405180830381865afa158015610e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5b91906123f7565b610dc4565b506001600160a01b031631919050565b6000610e7b8461083a565b600081815260208190526040902054909150610ee75760405162461bcd60e51b815260206004820152602560248201527f47656c61746f4f72646572735661756c742e66696c6c3a20494e56414c49445f60448201526427a92222a960d91b60648201526084016102c2565b600080808080610ef98789018961264a565b60008b8152602081815260408083208054939055969b509499509297509095509350916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691610f55918d01908d016123da565b6001600160a01b03161480610f95575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610f8a60408c0160208d016123da565b6001600160a01b0316145b15610fac57610fa78a82888887611115565b611047565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610fe660608c0160408d016123da565b6001600160a01b03161480611026575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61101b60608c0160408d016123da565b6001600160a01b0316145b1561103857610fa78a828888876113cd565b6110478a828888888888611617565b50505050505050505050565b60008080806110648587018761264a565b94509450505092506110b08a602001602081019061108291906123da565b61109260608d0160408e016123da565b8b8b8e60800160208101906110a791906123da565b8c89898961179b565b9a9950505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526111109084906118c3565b505050565b8284116111815760405162461bcd60e51b815260206004820152603460248201527f47656c61746f4f72646572735661756c742e66696c6c3a2043414e545f5041596044820152730bea48a9882b28aa4be8c8a8abea89ebe90928e960631b60648201526084016102c2565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6111a660408701602088016123da565b6001600160a01b0316036112cd576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d0e30db06111ed8587612448565b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561121857600080fd5b505af115801561122c573d6000803e3d6000fd5b50505050506112c8837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312fde4b76040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b991906126dd565b6001600160a01b031690611995565b61137b565b61137b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312fde4b76040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611351573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137591906126dd565b856110be565b6113af7f0000000000000000000000000000000000000000000000000000000000000000836113aa8688612448565b6110be565b6113c6816113c060208801886123da565b87611aae565b5050505050565b60006113f97f000000000000000000000000000000000000000000000000000000000000000030610dcb565b905061141561140e60408801602089016123da565b84876110be565b611420823088611aae565b60008161144d7f000000000000000000000000000000000000000000000000000000000000000030610dcb565b6114579190612448565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61147e6060890160408a016123da565b6001600160a01b031603611536576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016632e1a7d4d6114c58784612448565b6040518263ffffffff1660e01b81526004016114e391815260200190565b600060405180830381600087803b1580156114fd57600080fd5b505af1158015611511573d6000803e3d6000fd5b5050505061153185826115249190612448565b6112b960208a018a6123da565b611560565b6115606115496060890160408a016123da565b61155660208a018a6123da565b6113aa8885612448565b61160e7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312fde4b76040518163ffffffff1660e01b81526004016020604051808303816000875af11580156115e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160891906126dd565b876110be565b50505050505050565b600061162960a0890160808a016123da565b6001600160a01b0316631f00ca7487846040518363ffffffff1660e01b81526004016116569291906126fa565b600060405180830381865afa158015611673573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261169b9190810190612751565b6000815181106116ad576116ad6127d7565b602002602001015190506116d88860200160208101906116cd91906123da565b866113aa848b612448565b6116ef836116e960208b018b6123da565b8a611aae565b61170961170260408a0160208b016123da565b85836110be565b611791827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312fde4b76040518163ffffffff1660e01b81526004016020604051808303816000875af115801561176d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e991906126dd565b5050505050505050565b6000846001600160a01b03168a6001600160a01b031614806117d957506001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b1561180b578388116117ed575060006118b6565b866118026117fb868b612448565b8589611e0d565b101590506118b6565b846001600160a01b0316896001600160a01b0316148061184757506001600160a01b03891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b15611881576000611859898589611e0d565b905084811161186c5760009150506118b6565b876118778683612448565b10159150506118b6565b600061188e858489611eb6565b90508881106118a15760009150506118b6565b876118776118af838c612448565b868a611e0d565b9998505050505050505050565b6000611918826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f419092919063ffffffff16565b80519091501561111057808060200190518101906119369190612410565b6111105760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102c2565b804710156119e55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016102c2565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611a32576040519150601f19603f3d011682016040523d82523d6000602084013e611a37565b606091505b50509050806111105760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016102c2565b60005b60018451611abf9190612448565b811015611e0757600080858381518110611adb57611adb6127d7565b602002602001015186846001611af191906127ed565b81518110611b0157611b016127d7565b6020026020010151915091506000611b198383611f58565b5090506000611b3e611b3160808801606089016123da565b858589610100013561204f565b90506000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba7919061281c565b506001600160701b031691506001600160701b03169150600080866001600160a01b0316896001600160a01b031614611be1578284611be4565b83835b9092509050611bf960a08c0160808d016123da565b6040516370a0823160e01b81526001600160a01b0388811660048301529182169163054d50d49185918d16906370a0823190602401602060405180830381865afa158015611c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6f91906123f7565b611c799190612448565b6040516001600160e01b031960e084901b16815260048101919091526024810185905260448101849052606401602060405180830381865afa158015611cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce791906123f7565b945050505050600080846001600160a01b0316876001600160a01b031614611d1157826000611d15565b6000835b91509150600060028c51611d299190612448565b8910611d35578a611d78565b611d78611d4860808c0160608d016123da565b888e611d558d60026127ed565b81518110611d6557611d656127d7565b60200260200101518d610100013561204f565b6040805160008152602081019182905263022c0d9f60e01b9091529091506001600160a01b0386169063022c0d9f90611dba90869086908690602481016128c4565b600060405180830381600087803b158015611dd457600080fd5b505af1158015611de8573d6000803e3d6000fd5b5050505050505050505050508080611dff906128fb565b915050611ab1565b50505050565b600080826001600160a01b031663d06ca61f86866040518363ffffffff1660e01b8152600401611e3e9291906126fa565b600060405180830381865afa158015611e5b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e839190810190612751565b90508060018251611e949190612448565b81518110611ea457611ea46127d7565b60200260200101519150509392505050565b600080826001600160a01b0316631f00ca7486866040518363ffffffff1660e01b8152600401611ee79291906126fa565b600060405180830381865afa158015611f04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f2c9190810190612751565b905080600081518110611ea457611ea46127d7565b6060611f50848460008561210d565b949350505050565b600080826001600160a01b0316846001600160a01b031603611fca5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b60648201526084016102c2565b826001600160a01b0316846001600160a01b031610611fea578284611fed565b83835b90925090506001600160a01b0382166120485760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f41444452455353000060448201526064016102c2565b9250929050565b600080600061205e8686611f58565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b1660348201529193509150879060480160405160208183030381529060405280519060200120856040516020016120ea939291906001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b60408051601f198184030181529190528051602090910120979650505050505050565b60608247101561216e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102c2565b843b6121bc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102c2565b600080866001600160a01b031685876040516121d89190612914565b60006040518083038185875af1925050503d8060008114612215576040519150601f19603f3d011682016040523d82523d6000602084013e61221a565b606091505b509150915061222a828286612235565b979650505050505050565b60608315612244575081610dc4565b8251156122545782518084602001fd5b8160405162461bcd60e51b81526004016102c29190612930565b6000610120828403121561228157600080fd5b50919050565b6000610120828403121561229a57600080fd5b610dc4838361226e565b6000602082840312156122b657600080fd5b5035919050565b60008083601f8401126122cf57600080fd5b50813567ffffffffffffffff8111156122e757600080fd5b60208301915083602082850101111561204857600080fd5b6000806000610140848603121561231557600080fd5b61231f858561226e565b925061012084013567ffffffffffffffff81111561233c57600080fd5b612348868287016122bd565b9497909650939450505050565b600080600080610160858703121561236c57600080fd5b8435935061237d866020870161226e565b925061014085013567ffffffffffffffff81111561239a57600080fd5b6123a6878288016122bd565b95989497509550505050565b6001600160a01b03811681146123c757600080fd5b50565b80356123d5816123b2565b919050565b6000602082840312156123ec57600080fd5b8135610dc4816123b2565b60006020828403121561240957600080fd5b5051919050565b60006020828403121561242257600080fd5b81518015158114610dc457600080fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561245a5761245a612432565b500390565b803561246a816123b2565b6001600160a01b031682526020810135612483816123b2565b6001600160a01b0316602083015261249d604082016123ca565b6001600160a01b031660408301526124b7606082016123ca565b6001600160a01b031660608301526124d1608082016123ca565b6001600160a01b0316608083015260a0818101359083015260c0808201359083015260e0808201359083015261010090810135910152565b6101408101612518828561245f565b826101208301529392505050565b6101208101610cb9828461245f565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156125aa576125aa61256b565b604052919050565b600067ffffffffffffffff8211156125cc576125cc61256b565b5060051b60200190565b600082601f8301126125e757600080fd5b813560206125fc6125f7836125b2565b612581565b82815260059290921b8401810191818101908684111561261b57600080fd5b8286015b8481101561263f578035612632816123b2565b835291830191830161261f565b509695505050505050565b600080600080600060a0868803121561266257600080fd5b853594506020860135612674816123b2565b93506040860135612684816123b2565b9250606086013567ffffffffffffffff808211156126a157600080fd5b6126ad89838a016125d6565b935060808801359150808211156126c357600080fd5b506126d0888289016125d6565b9150509295509295909350565b6000602082840312156126ef57600080fd5b8151610dc4816123b2565b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156127445784516001600160a01b03168352938301939183019160010161271f565b5090979650505050505050565b6000602080838503121561276457600080fd5b825167ffffffffffffffff81111561277b57600080fd5b8301601f8101851361278c57600080fd5b805161279a6125f7826125b2565b81815260059190911b820183019083810190878311156127b957600080fd5b928401925b8284101561222a578351825292840192908401906127be565b634e487b7160e01b600052603260045260246000fd5b6000821982111561280057612800612432565b500190565b80516001600160701b03811681146123d557600080fd5b60008060006060848603121561283157600080fd5b61283a84612805565b925061284860208501612805565b9150604084015163ffffffff8116811461286157600080fd5b809150509250925092565b60005b8381101561288757818101518382015260200161286f565b83811115611e075750506000910152565b600081518084526128b081602086016020860161286c565b601f01601f19169290920160200192915050565b84815283602082015260018060a01b03831660408201526080606082015260006128f16080830184612898565b9695505050505050565b60006001820161290d5761290d612432565b5060010190565b6000825161292681846020870161286c565b9190910192915050565b602081526000610dc4602083018461289856fe47656c61746f4f72646572735661756c742e6465706f7369744e61746976653a47656c61746f4f72646572735661756c742e6465706f736974546f6b656e3a20a2646970667358221220cca2716ded82030c68b52c80c4dd6ba6233ea7fffb3916f69877d22d5f1a28d364736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c8063bc01325911610059578063bc0132591461016a578063d49cbd501461018a578063d620497c146101aa578063d999984d146101ca578063eff557a71461021657600080fd5b80633a8f1235146100965780633d4dff7b146100b857806354a09aa5146100f85780637e0c34581461010b5780638acc6b3c1461014a575b600080fd5b3480156100a257600080fd5b506100b66100b1366004612287565b61024a565b005b3480156100c457600080fd5b506100e56100d33660046122a4565b60006020819052908152604090205481565b6040519081526020015b60405180910390f35b6100b6610106366004612287565b610634565b34801561011757600080fd5b5061013a6101263660046122a4565b600090815260208190526040902054151590565b60405190151581526020016100ef565b34801561015657600080fd5b506100e5610165366004612287565b61083a565b34801561017657600080fd5b506100b6610185366004612287565b61086a565b34801561019657600080fd5b506100b66101a53660046122ff565b6109dd565b3480156101b657600080fd5b5061013a6101c5366004612355565b610bf5565b3480156101d657600080fd5b506101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100ef565b34801561022257600080fd5b506101fe7f000000000000000000000000000000000000000000000000000000000000000081565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61026f60408301602084016123da565b6001600160a01b0316036102cb5760405162461bcd60e51b815260206004820152602a602482015260008051602061296483398151915260448201526904f4e4c595f45524332360b41b60648201526084015b60405180910390fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661030560408301602084016123da565b6001600160a01b03160361037f5761032b61032660608301604084016123da565b610c5b565b1561037f5760405162461bcd60e51b8152602060048201526030602482015260008051602061296483398151915260448201526f4e41544956455f544f5f4e415449564560801b60648201526084016102c2565b600061039160408301602084016123da565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156103d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb91906123f7565b905061040d60408301602084016123da565b6040516323b872dd60e01b815233600482015230602482015260a084013560448201526001600160a01b0391909116906323b872dd906064016020604051808303816000875af1158015610465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104899190612410565b50600061049c60408401602085016123da565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156104e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050691906123f7565b905060006105148383612448565b90508060000361056b5760405162461bcd60e51b815260206004820152602e602482015260008051602061296483398151915260448201526d1393d7d513d2d15394d7d4d1539560921b60648201526084016102c2565b60006105768561083a565b600081815260208190526040902054909150156105e05760405162461bcd60e51b815260206004820152603460248201526000805160206129648339815191526044820152734f524445525f414c52454144595f45585349545360601b60648201526084016102c2565b600081815260208190526040908190208390555181907f20c269191222298467aab5c214f40504fe0206bf5d94486946a749f04cdc048c906106259088908690612509565b60405180910390a25050505050565b346000036106865760405162461bcd60e51b815260206004820152602b602482015260008051602061294483398151915260448201526a02056414c55455f49535f360ac1b60648201526084016102c2565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6106ab60408301602084016123da565b6001600160a01b03161461070a5760405162461bcd60e51b81526020600482015260326024820152600080516020612944833981519152604482015271102ba927a723afa4a7282aaa2faa27a5a2a760711b60648201526084016102c2565b61071d61032660608301604084016123da565b156107725760405162461bcd60e51b81526020600482015260316024820152600080516020612944833981519152604482015270204e41544956455f544f5f4e415449564560781b60648201526084016102c2565b600061077d8261083a565b600081815260208190526040902054909150156107e85760405162461bcd60e51b81526020600482015260356024820152600080516020612944833981519152604482015274204f524445525f414c52454144595f45585349545360581b60648201526084016102c2565b600081815260208190526040908190203490819055905182917f20c269191222298467aab5c214f40504fe0206bf5d94486946a749f04cdc048c9161082e918691612509565b60405180910390a25050565b60008160405160200161084d9190612526565b604051602081830303815290604052805190602001209050919050565b61087760208201826123da565b6001600160a01b0316336001600160a01b0316146108ec5760405162461bcd60e51b815260206004820152602c60248201527f47656c61746f4f72646572735661756c742e63616e63656c4f726465723a204960448201526b272b20a624a22fa7aba722a960a11b60648201526084016102c2565b60006108f78261083a565b60008181526020819052604090205490915061096a5760405162461bcd60e51b815260206004820152602c60248201527f47656c61746f4f72646572735661756c742e63616e63656c4f726465723a204960448201526b272b20a624a22fa7a92222a960a11b60648201526084016102c2565b600061098661097f60408501602086016123da565b8333610cbf565b905061099560208401846123da565b6001600160a01b0316827f748f3ed3813a0b11e46a6229680e83073e44e99f7a093329b13abab8409d1b98836040516109d091815260200190565b60405180910390a3505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610a555760405162461bcd60e51b815260206004820152601d60248201527f47656c61746f4f72646572735661756c743a206f6e6c7947656c61746f00000060448201526064016102c2565b600260015403610aa75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102c2565b60026001556000610ad3610ac160608601604087016123da565b610ace60208701876123da565b610dcb565b9050610ae0848484610e70565b6000610b02610af560608701604088016123da565b610ace60208801886123da565b905060c0850135610b138383612448565b1015610b875760405162461bcd60e51b815260206004820152603e60248201527f47656c61746f4f72646572735661756c742e66696c6c3a20495353554649434960448201527f454e545f4f574e45525f4f55545055545f544f4b454e5f42414c414e4345000060648201526084016102c2565b610b9460208601866123da565b6001600160a01b0316610ba68661083a565b7f72d676daec0260566cd7ec0d194d62784969b10a6a4c2e27ce6a144eb654ba82610bd18585612448565b8787604051610be293929190612535565b60405180910390a3505060018055505050565b6000610c036101268561083a565b8015610c525750610c5284600080610c1a8861083a565b815260200190815260200160002054877f00000000000000000000000000000000000000000000000000000000000000008787611053565b95945050505050565b60006001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480610cb957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b6000828152602081905260408120805491905573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03851601610db9576000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610d44576040519150601f19603f3d011682016040523d82523d6000602084013e610d49565b606091505b5050905080610db35760405162461bcd60e51b815260206004820152603060248201527f47656c61746f4f72646572735661756c742e5f70756c6c4f726465723a20534560448201526f139117d3905512559157d1905253115160821b60648201526084016102c2565b50610dc4565b610dc48483836110be565b9392505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03841614610e60576040516370a0823160e01b81526001600160a01b0383811660048301528416906370a0823190602401602060405180830381865afa158015610e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5b91906123f7565b610dc4565b506001600160a01b031631919050565b6000610e7b8461083a565b600081815260208190526040902054909150610ee75760405162461bcd60e51b815260206004820152602560248201527f47656c61746f4f72646572735661756c742e66696c6c3a20494e56414c49445f60448201526427a92222a960d91b60648201526084016102c2565b600080808080610ef98789018961264a565b60008b8152602081815260408083208054939055969b509499509297509095509350916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691610f55918d01908d016123da565b6001600160a01b03161480610f95575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610f8a60408c0160208d016123da565b6001600160a01b0316145b15610fac57610fa78a82888887611115565b611047565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610fe660608c0160408d016123da565b6001600160a01b03161480611026575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61101b60608c0160408d016123da565b6001600160a01b0316145b1561103857610fa78a828888876113cd565b6110478a828888888888611617565b50505050505050505050565b60008080806110648587018761264a565b94509450505092506110b08a602001602081019061108291906123da565b61109260608d0160408e016123da565b8b8b8e60800160208101906110a791906123da565b8c89898961179b565b9a9950505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526111109084906118c3565b505050565b8284116111815760405162461bcd60e51b815260206004820152603460248201527f47656c61746f4f72646572735661756c742e66696c6c3a2043414e545f5041596044820152730bea48a9882b28aa4be8c8a8abea89ebe90928e960631b60648201526084016102c2565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6111a660408701602088016123da565b6001600160a01b0316036112cd576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d0e30db06111ed8587612448565b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561121857600080fd5b505af115801561122c573d6000803e3d6000fd5b50505050506112c8837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312fde4b76040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b991906126dd565b6001600160a01b031690611995565b61137b565b61137b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312fde4b76040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611351573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137591906126dd565b856110be565b6113af7f0000000000000000000000000000000000000000000000000000000000000000836113aa8688612448565b6110be565b6113c6816113c060208801886123da565b87611aae565b5050505050565b60006113f97f000000000000000000000000000000000000000000000000000000000000000030610dcb565b905061141561140e60408801602089016123da565b84876110be565b611420823088611aae565b60008161144d7f000000000000000000000000000000000000000000000000000000000000000030610dcb565b6114579190612448565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61147e6060890160408a016123da565b6001600160a01b031603611536576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016632e1a7d4d6114c58784612448565b6040518263ffffffff1660e01b81526004016114e391815260200190565b600060405180830381600087803b1580156114fd57600080fd5b505af1158015611511573d6000803e3d6000fd5b5050505061153185826115249190612448565b6112b960208a018a6123da565b611560565b6115606115496060890160408a016123da565b61155660208a018a6123da565b6113aa8885612448565b61160e7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312fde4b76040518163ffffffff1660e01b81526004016020604051808303816000875af11580156115e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160891906126dd565b876110be565b50505050505050565b600061162960a0890160808a016123da565b6001600160a01b0316631f00ca7487846040518363ffffffff1660e01b81526004016116569291906126fa565b600060405180830381865afa158015611673573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261169b9190810190612751565b6000815181106116ad576116ad6127d7565b602002602001015190506116d88860200160208101906116cd91906123da565b866113aa848b612448565b6116ef836116e960208b018b6123da565b8a611aae565b61170961170260408a0160208b016123da565b85836110be565b611791827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312fde4b76040518163ffffffff1660e01b81526004016020604051808303816000875af115801561176d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e991906126dd565b5050505050505050565b6000846001600160a01b03168a6001600160a01b031614806117d957506001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b1561180b578388116117ed575060006118b6565b866118026117fb868b612448565b8589611e0d565b101590506118b6565b846001600160a01b0316896001600160a01b0316148061184757506001600160a01b03891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b15611881576000611859898589611e0d565b905084811161186c5760009150506118b6565b876118778683612448565b10159150506118b6565b600061188e858489611eb6565b90508881106118a15760009150506118b6565b876118776118af838c612448565b868a611e0d565b9998505050505050505050565b6000611918826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f419092919063ffffffff16565b80519091501561111057808060200190518101906119369190612410565b6111105760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102c2565b804710156119e55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016102c2565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611a32576040519150601f19603f3d011682016040523d82523d6000602084013e611a37565b606091505b50509050806111105760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016102c2565b60005b60018451611abf9190612448565b811015611e0757600080858381518110611adb57611adb6127d7565b602002602001015186846001611af191906127ed565b81518110611b0157611b016127d7565b6020026020010151915091506000611b198383611f58565b5090506000611b3e611b3160808801606089016123da565b858589610100013561204f565b90506000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba7919061281c565b506001600160701b031691506001600160701b03169150600080866001600160a01b0316896001600160a01b031614611be1578284611be4565b83835b9092509050611bf960a08c0160808d016123da565b6040516370a0823160e01b81526001600160a01b0388811660048301529182169163054d50d49185918d16906370a0823190602401602060405180830381865afa158015611c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6f91906123f7565b611c799190612448565b6040516001600160e01b031960e084901b16815260048101919091526024810185905260448101849052606401602060405180830381865afa158015611cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce791906123f7565b945050505050600080846001600160a01b0316876001600160a01b031614611d1157826000611d15565b6000835b91509150600060028c51611d299190612448565b8910611d35578a611d78565b611d78611d4860808c0160608d016123da565b888e611d558d60026127ed565b81518110611d6557611d656127d7565b60200260200101518d610100013561204f565b6040805160008152602081019182905263022c0d9f60e01b9091529091506001600160a01b0386169063022c0d9f90611dba90869086908690602481016128c4565b600060405180830381600087803b158015611dd457600080fd5b505af1158015611de8573d6000803e3d6000fd5b5050505050505050505050508080611dff906128fb565b915050611ab1565b50505050565b600080826001600160a01b031663d06ca61f86866040518363ffffffff1660e01b8152600401611e3e9291906126fa565b600060405180830381865afa158015611e5b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e839190810190612751565b90508060018251611e949190612448565b81518110611ea457611ea46127d7565b60200260200101519150509392505050565b600080826001600160a01b0316631f00ca7486866040518363ffffffff1660e01b8152600401611ee79291906126fa565b600060405180830381865afa158015611f04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f2c9190810190612751565b905080600081518110611ea457611ea46127d7565b6060611f50848460008561210d565b949350505050565b600080826001600160a01b0316846001600160a01b031603611fca5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b60648201526084016102c2565b826001600160a01b0316846001600160a01b031610611fea578284611fed565b83835b90925090506001600160a01b0382166120485760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f41444452455353000060448201526064016102c2565b9250929050565b600080600061205e8686611f58565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b1660348201529193509150879060480160405160208183030381529060405280519060200120856040516020016120ea939291906001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b60408051601f198184030181529190528051602090910120979650505050505050565b60608247101561216e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102c2565b843b6121bc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102c2565b600080866001600160a01b031685876040516121d89190612914565b60006040518083038185875af1925050503d8060008114612215576040519150601f19603f3d011682016040523d82523d6000602084013e61221a565b606091505b509150915061222a828286612235565b979650505050505050565b60608315612244575081610dc4565b8251156122545782518084602001fd5b8160405162461bcd60e51b81526004016102c29190612930565b6000610120828403121561228157600080fd5b50919050565b6000610120828403121561229a57600080fd5b610dc4838361226e565b6000602082840312156122b657600080fd5b5035919050565b60008083601f8401126122cf57600080fd5b50813567ffffffffffffffff8111156122e757600080fd5b60208301915083602082850101111561204857600080fd5b6000806000610140848603121561231557600080fd5b61231f858561226e565b925061012084013567ffffffffffffffff81111561233c57600080fd5b612348868287016122bd565b9497909650939450505050565b600080600080610160858703121561236c57600080fd5b8435935061237d866020870161226e565b925061014085013567ffffffffffffffff81111561239a57600080fd5b6123a6878288016122bd565b95989497509550505050565b6001600160a01b03811681146123c757600080fd5b50565b80356123d5816123b2565b919050565b6000602082840312156123ec57600080fd5b8135610dc4816123b2565b60006020828403121561240957600080fd5b5051919050565b60006020828403121561242257600080fd5b81518015158114610dc457600080fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561245a5761245a612432565b500390565b803561246a816123b2565b6001600160a01b031682526020810135612483816123b2565b6001600160a01b0316602083015261249d604082016123ca565b6001600160a01b031660408301526124b7606082016123ca565b6001600160a01b031660608301526124d1608082016123ca565b6001600160a01b0316608083015260a0818101359083015260c0808201359083015260e0808201359083015261010090810135910152565b6101408101612518828561245f565b826101208301529392505050565b6101208101610cb9828461245f565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156125aa576125aa61256b565b604052919050565b600067ffffffffffffffff8211156125cc576125cc61256b565b5060051b60200190565b600082601f8301126125e757600080fd5b813560206125fc6125f7836125b2565b612581565b82815260059290921b8401810191818101908684111561261b57600080fd5b8286015b8481101561263f578035612632816123b2565b835291830191830161261f565b509695505050505050565b600080600080600060a0868803121561266257600080fd5b853594506020860135612674816123b2565b93506040860135612684816123b2565b9250606086013567ffffffffffffffff808211156126a157600080fd5b6126ad89838a016125d6565b935060808801359150808211156126c357600080fd5b506126d0888289016125d6565b9150509295509295909350565b6000602082840312156126ef57600080fd5b8151610dc4816123b2565b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156127445784516001600160a01b03168352938301939183019160010161271f565b5090979650505050505050565b6000602080838503121561276457600080fd5b825167ffffffffffffffff81111561277b57600080fd5b8301601f8101851361278c57600080fd5b805161279a6125f7826125b2565b81815260059190911b820183019083810190878311156127b957600080fd5b928401925b8284101561222a578351825292840192908401906127be565b634e487b7160e01b600052603260045260246000fd5b6000821982111561280057612800612432565b500190565b80516001600160701b03811681146123d557600080fd5b60008060006060848603121561283157600080fd5b61283a84612805565b925061284860208501612805565b9150604084015163ffffffff8116811461286157600080fd5b809150509250925092565b60005b8381101561288757818101518382015260200161286f565b83811115611e075750506000910152565b600081518084526128b081602086016020860161286c565b601f01601f19169290920160200192915050565b84815283602082015260018060a01b03831660408201526080606082015260006128f16080830184612898565b9695505050505050565b60006001820161290d5761290d612432565b5060010190565b6000825161292681846020870161286c565b9190910192915050565b602081526000610dc4602083018461289856fe47656c61746f4f72646572735661756c742e6465706f7369744e61746976653a47656c61746f4f72646572735661756c742e6465706f736974546f6b656e3a20a2646970667358221220cca2716ded82030c68b52c80c4dd6ba6233ea7fffb3916f69877d22d5f1a28d364736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1367,
        "contract": "contracts/GelatoUniswapV2LimitOrders.sol:GelatoUniswapV2LimitOrders",
        "label": "deposits",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 10,
        "contract": "contracts/GelatoUniswapV2LimitOrders.sol:GelatoUniswapV2LimitOrders",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}