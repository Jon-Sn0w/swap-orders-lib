/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GelatoUniswapV2OrdersVaultInterface extends ethers.utils.Interface {
  functions: {
    "GELATO()": FunctionFragment;
    "WRAPPED_NATIVE()": FunctionFragment;
    "canFill(uint256,(address,address,address,address,address,uint256,uint256,uint256,bytes32,bytes),bytes)": FunctionFragment;
    "cancelOrder((address,address,address,address,address,uint256,uint256,uint256,bytes32,bytes))": FunctionFragment;
    "depositNative((address,address,address,address,address,uint256,uint256,uint256,bytes32,bytes))": FunctionFragment;
    "depositToken((address,address,address,address,address,uint256,uint256,uint256,bytes32,bytes))": FunctionFragment;
    "deposits(bytes32)": FunctionFragment;
    "fill((address,address,address,address,address,uint256,uint256,uint256,bytes32,bytes),bytes)": FunctionFragment;
    "isActiveOrder(bytes32)": FunctionFragment;
    "keyOf((address,address,address,address,address,uint256,uint256,uint256,bytes32,bytes))": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "GELATO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WRAPPED_NATIVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canFill",
    values: [
      BigNumberish,
      {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [
      {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNative",
    values: [
      {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [
      {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "deposits", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "fill",
    values: [
      {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveOrder",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "keyOf",
    values: [
      {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      }
    ]
  ): string;

  decodeFunctionResult(functionFragment: "GELATO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WRAPPED_NATIVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canFill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isActiveOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keyOf", data: BytesLike): Result;

  events: {
    "LogCancelled(bytes32,address,uint256)": EventFragment;
    "LogDeposit(bytes32,tuple,uint256)": EventFragment;
    "LogFill(bytes32,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFill"): EventFragment;
}

export type LogCancelledEvent = TypedEvent<
  [string, string, BigNumber] & {
    key: string;
    owner: string;
    amount: BigNumber;
  }
>;

export type LogDepositEvent = TypedEvent<
  [
    string,
    [
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      owner: string;
      inputToken: string;
      outputToken: string;
      factory: string;
      router: string;
      amountIn: BigNumber;
      minReturn: BigNumber;
      salt: BigNumber;
      initCodeHash: string;
      data: string;
    },
    BigNumber
  ] & {
    key: string;
    order: [
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      owner: string;
      inputToken: string;
      outputToken: string;
      factory: string;
      router: string;
      amountIn: BigNumber;
      minReturn: BigNumber;
      salt: BigNumber;
      initCodeHash: string;
      data: string;
    };
    amountIn: BigNumber;
  }
>;

export type LogFillEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    key: string;
    owner: string;
    amountOut: BigNumber;
    auxData: string;
  }
>;

export class GelatoUniswapV2OrdersVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GelatoUniswapV2OrdersVaultInterface;

  functions: {
    GELATO(overrides?: CallOverrides): Promise<[string]>;

    WRAPPED_NATIVE(overrides?: CallOverrides): Promise<[string]>;

    canFill(
      _minReturn: BigNumberish,
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      _auxData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancelOrder(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositNative(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositToken(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposits(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    fill(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      _auxData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isActiveOrder(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    keyOf(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  GELATO(overrides?: CallOverrides): Promise<string>;

  WRAPPED_NATIVE(overrides?: CallOverrides): Promise<string>;

  canFill(
    _minReturn: BigNumberish,
    _order: {
      owner: string;
      inputToken: string;
      outputToken: string;
      factory: string;
      router: string;
      amountIn: BigNumberish;
      minReturn: BigNumberish;
      salt: BigNumberish;
      initCodeHash: BytesLike;
      data: BytesLike;
    },
    _auxData: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cancelOrder(
    _order: {
      owner: string;
      inputToken: string;
      outputToken: string;
      factory: string;
      router: string;
      amountIn: BigNumberish;
      minReturn: BigNumberish;
      salt: BigNumberish;
      initCodeHash: BytesLike;
      data: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositNative(
    _order: {
      owner: string;
      inputToken: string;
      outputToken: string;
      factory: string;
      router: string;
      amountIn: BigNumberish;
      minReturn: BigNumberish;
      salt: BigNumberish;
      initCodeHash: BytesLike;
      data: BytesLike;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositToken(
    _order: {
      owner: string;
      inputToken: string;
      outputToken: string;
      factory: string;
      router: string;
      amountIn: BigNumberish;
      minReturn: BigNumberish;
      salt: BigNumberish;
      initCodeHash: BytesLike;
      data: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposits(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  fill(
    _order: {
      owner: string;
      inputToken: string;
      outputToken: string;
      factory: string;
      router: string;
      amountIn: BigNumberish;
      minReturn: BigNumberish;
      salt: BigNumberish;
      initCodeHash: BytesLike;
      data: BytesLike;
    },
    _auxData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isActiveOrder(_key: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  keyOf(
    _order: {
      owner: string;
      inputToken: string;
      outputToken: string;
      factory: string;
      router: string;
      amountIn: BigNumberish;
      minReturn: BigNumberish;
      salt: BigNumberish;
      initCodeHash: BytesLike;
      data: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    GELATO(overrides?: CallOverrides): Promise<string>;

    WRAPPED_NATIVE(overrides?: CallOverrides): Promise<string>;

    canFill(
      _minReturn: BigNumberish,
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      _auxData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelOrder(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    depositNative(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    depositToken(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    fill(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      _auxData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isActiveOrder(_key: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    keyOf(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "LogCancelled(bytes32,address,uint256)"(
      key?: BytesLike | null,
      owner?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { key: string; owner: string; amount: BigNumber }
    >;

    LogCancelled(
      key?: BytesLike | null,
      owner?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { key: string; owner: string; amount: BigNumber }
    >;

    "LogDeposit(bytes32,tuple,uint256)"(
      key?: BytesLike | null,
      order?: null,
      amountIn?: null
    ): TypedEventFilter<
      [
        string,
        [
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          owner: string;
          inputToken: string;
          outputToken: string;
          factory: string;
          router: string;
          amountIn: BigNumber;
          minReturn: BigNumber;
          salt: BigNumber;
          initCodeHash: string;
          data: string;
        },
        BigNumber
      ],
      {
        key: string;
        order: [
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          owner: string;
          inputToken: string;
          outputToken: string;
          factory: string;
          router: string;
          amountIn: BigNumber;
          minReturn: BigNumber;
          salt: BigNumber;
          initCodeHash: string;
          data: string;
        };
        amountIn: BigNumber;
      }
    >;

    LogDeposit(
      key?: BytesLike | null,
      order?: null,
      amountIn?: null
    ): TypedEventFilter<
      [
        string,
        [
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          owner: string;
          inputToken: string;
          outputToken: string;
          factory: string;
          router: string;
          amountIn: BigNumber;
          minReturn: BigNumber;
          salt: BigNumber;
          initCodeHash: string;
          data: string;
        },
        BigNumber
      ],
      {
        key: string;
        order: [
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          owner: string;
          inputToken: string;
          outputToken: string;
          factory: string;
          router: string;
          amountIn: BigNumber;
          minReturn: BigNumber;
          salt: BigNumber;
          initCodeHash: string;
          data: string;
        };
        amountIn: BigNumber;
      }
    >;

    "LogFill(bytes32,address,uint256,bytes)"(
      key?: BytesLike | null,
      owner?: string | null,
      amountOut?: null,
      auxData?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { key: string; owner: string; amountOut: BigNumber; auxData: string }
    >;

    LogFill(
      key?: BytesLike | null,
      owner?: string | null,
      amountOut?: null,
      auxData?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { key: string; owner: string; amountOut: BigNumber; auxData: string }
    >;
  };

  estimateGas: {
    GELATO(overrides?: CallOverrides): Promise<BigNumber>;

    WRAPPED_NATIVE(overrides?: CallOverrides): Promise<BigNumber>;

    canFill(
      _minReturn: BigNumberish,
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      _auxData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositNative(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositToken(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposits(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    fill(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      _auxData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isActiveOrder(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keyOf(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GELATO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WRAPPED_NATIVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canFill(
      _minReturn: BigNumberish,
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      _auxData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositNative(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositToken(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fill(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      _auxData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isActiveOrder(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keyOf(
      _order: {
        owner: string;
        inputToken: string;
        outputToken: string;
        factory: string;
        router: string;
        amountIn: BigNumberish;
        minReturn: BigNumberish;
        salt: BigNumberish;
        initCodeHash: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
